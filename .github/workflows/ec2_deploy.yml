name: Build and Push Docker Image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:  # This line allows manual triggering of the workflow.

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        repository: 'dingjunyu888/crud-react-node-mySQL-go'
        token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1

    - name: Start EC2 Instance for Building and Testing
      run: |
        INSTANCE_ID=$(aws ec2 run-instances --image-id ami-05b10e08d247fb927 --instance-type t2.micro --key-name spa --security-group-ids sg-071cee3302403d191 --subnet-id subnet-0cc84b17429331c3d --query "Instances[0].InstanceId" --output text)
        echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
        echo "::set-output name=instance_id::$INSTANCE_ID"
        echo "Instance ID: $INSTANCE_ID"

    - name: Wait for EC2 Instance to be Running
      run: |
        aws ec2 wait instance-running --instance-ids $INSTANCE_ID
        echo "Instance is now running."

    - name: Get EC2 Public IP
      id: get-ip
      run: |
        PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
        echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
        echo "::set-output name=public_ip::$PUBLIC_IP"

    - name: Wait for EC2 Status Checks
      run: |
        echo "Waiting for EC2 status checks to complete..."
        aws ec2 wait instance-status-ok --instance-ids $INSTANCE_ID
        echo "EC2 instance is ready."

    - name: Set up SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" | base64 --decode > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ steps.get-ip.outputs.public_ip }} >> ~/.ssh/known_hosts

    - name: Install Docker
      run: |
        sudo dnf update -y
        sudo dnf install -y docker docker-cli containerd
        sudo systemctl start docker
        sudo systemctl enable docker
        sudo usermod -aG docker ec2-user

    - name: Verify Docker Installation
      run: |
        docker --version

    - name: Clone Infra Repo
      run: |
        git clone https://github.com/dingjunyu888/SPA-APPLICATION-INFRA.git
        chmod +x ./SPA-APPLICATION-INFRA/scripts/smoke-test.sh

    - name: Build, Tag, and Smoke Test Docker Image on EC2
      env:
        INSTANCE_IP: ${{ steps.get-ip.outputs.public_ip }}
      run: |
        # SSH into the EC2 instance to build and test the Docker image
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${INSTANCE_IP} << 'EOF'
        docker build -t temp-image:latest .
        chmod +x ./SPA-APPLICATION-INFRA/scripts/smoke-test.sh  # Ensure the script is executable
        ./SPA-APPLICATION-INFRA/scripts/smoke-test.sh
        if [ $? -ne 0 ]; then
          echo "Smoke tests failed."
          exit 1
        fi
        EOF

    - name: Push Image to Amazon ECR if Tests Pass
      run: |
        docker tag temp-image:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Clean up EC2 Instance
      if: always()
      run: |
        aws ec2 terminate-instances --instance-ids $INSTANCE_ID
