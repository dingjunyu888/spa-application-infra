name: Build and Push Docker Image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 11 * * *'  # CA 0am
  workflow_dispatch:  # This line allows manual triggering of the workflow.

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        repository: 'dingjunyu888/crud-react-node-mySQL-go'
        token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
        path: root

    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1

    - name: Start EC2 Instance for Building and Testing
      run: |
        INSTANCE_ID=$(aws ec2 run-instances --image-id ami-05b10e08d247fb927 --instance-type t2.micro --key-name spa --security-group-ids sg-071cee3302403d191 --subnet-id subnet-0cc84b17429331c3d --query "Instances[0].InstanceId" --output text)
        echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
        echo "::set-output name=instance_id::$INSTANCE_ID"
        echo "Instance ID: $INSTANCE_ID"

    - name: Wait for EC2 Instance to be Running
      run: |
        aws ec2 wait instance-running --instance-ids $INSTANCE_ID
        echo "Instance is now running."

    - name: Get TEMP EC2 Public IP
      id: get-temp-ec2-ip
      run: |
        PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
        echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
        echo "::set-output name=public_ip::$PUBLIC_IP"

    - name: Wait for EC2 Status Checks
      run: |
        echo "Waiting for EC2 status checks to complete..."
        aws ec2 wait instance-status-ok --instance-ids $INSTANCE_ID
        echo "EC2 instance is ready."

    - name: Set up SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" | base64 --decode > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ steps.get-temp-ec2-ip.outputs.public_ip }} >> ~/.ssh/known_hosts

    - name: Access EC2 and Install Docker
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{ steps.get-temp-ec2-ip.outputs.public_ip }} \
        "export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}; \
        export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}; \
        export AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}; \
        sudo yum update -y && \
        sudo yum install -y docker git && \
        sudo service docker start && \
        sudo usermod -aG docker ec2-user && \
        sudo curl -L 'https://github.com/docker/compose/releases/download/v2.10.2/docker-compose-$(uname -s)-$(uname -m)' -o /usr/local/bin/docker-compose && \
        sudo chmod +x /usr/local/bin/docker-compose && \
        docker-compose --version && \
        aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}"

    - name: Verify Docker Installation
      run: |
        docker --version


    - name: Clone Repo, Build and Run Docker Containers
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@$PUBLIC_IP << EOF
        git clone https://github.com/dingjunyu888/crud-react-node-mySQL-go.git
        cd crud-react-node-mySQL-go
        docker-compose up -d
        EOF

    - name: Run Smoke Test
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@$PUBLIC_IP << 'BASH_SCRIPT'
        ENDPOINT="http://localhost:8800/books"
        echo "Checking API endpoint: $ENDPOINT"
        response=$(curl -s -o /dev/null -w "%{http_code}" "$ENDPOINT")
        if [[ "$response" -ne 200 ]]; then
          echo "Smoke test initial check failed: HTTP $response"
          exit 1
        else
          echo "API is up. Status: HTTP $response"
        fi

        echo "Creating a new book..."
        POST_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X POST -H "Content-Type: application/json" -d '{"title":"Integration Test Book","description":"A book for test","price":9.99,"cover":"http://example.com/cover.jpg"}' "$ENDPOINT")
        if [ "$POST_RESPONSE" -ne 200 ]; then
          echo "Failed to create a book. Response code: $POST_RESPONSE"
          exit 1
        fi

        echo "Retrieving the list of books..."
        BOOKS=$(curl -s "$ENDPOINT")
        BOOK_ID=$(echo "$BOOKS" | jq -r '.[3].id')
        echo "Retrieved Book ID: $BOOK_ID"

        echo "Updating the book ID: $BOOK_ID..."
        PUT_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X PUT -H "Content-Type: application/json" -d '{"title":"Updated Integration Test Book","description":"Updated description.","price":18.99,"cover":"http://example.com/new_cover.jpg"}' "$ENDPOINT/$BOOK_ID")
        if [ "$PUT_RESPONSE" -ne 200 ]; then
          echo "Failed to update the book. Response code: $PUT_RESPONSE"
          exit 1
        fi

        echo "Verifying the updates..."
        UPDATED_BOOK=$(curl -s "$ENDPOINT/$BOOK_ID")
        UPDATED_TITLE=$(echo "$UPDATED_BOOK" | jq -r '.title')
        if [ "$UPDATED_TITLE" != "Updated Integration Test Book" ]; then
          echo "Book update verification failed. Expected 'Updated Integration Test Book', got '$UPDATED_TITLE'"
          exit 1
        fi

        echo "âœ… Integration tests passed successfully!"
        BASH_SCRIPT
    
    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

    - name: Build Docker Image and Push Docker Image to ECR (Backend)
      run: |
        cd root
        docker build -t ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_BACKEND_REPOSITORY }}:backend-latest ./backend
        docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_BACKEND_REPOSITORY }}:backend-latest

    - name: Build Docker Image and Push Docker Image to ECR(Frontend)
      run: |
        cd root
        docker build --build-arg VITE_APP_BACKEND_URL=https://bookstore.junyuding.com -t ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_FRONTEND_REPOSITORY }}:frontend-latest ./frontend
        docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_FRONTEND_REPOSITORY }}:frontend-latest

    - name: Clean up EC2 Instance
      if: always()
      run: |
        aws ec2 terminate-instances --instance-ids $INSTANCE_ID

    - name: Get QA MACHINE EC2 Public IP
      id: get-qa-ec2-ip
      run: |
        PUBLIC_IP=$(aws ec2 describe-instances --instance-ids i-0879ec440e38f26e1 --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
        echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
        echo "::set-output name=public_ip::$PUBLIC_IP"

    - name: Set up SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" | base64 --decode > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ steps.get-qa-ec2-ip.outputs.public_ip }} >> ~/.ssh/known_hosts

    - name: Configure AWS CLI
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{ steps.get-qa-ec2-ip.outputs.public_ip }} \
        "aws configure set aws_access_key_id '${{ secrets.AWS_ACCESS_KEY_ID }}' && \
        aws configure set aws_secret_access_key '${{ secrets.AWS_SECRET_ACCESS_KEY }}' && \
        aws configure set aws_session_token '${{ secrets.AWS_SESSION_TOKEN }}' && \
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}"

    - name: Stop and Pull Docker Images from ECR
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{ steps.get-qa-ec2-ip.outputs.public_ip }} \
        "docker pull ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_BACKEND_REPOSITORY }}:backend-latest && \
        docker pull ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_FRONTEND_REPOSITORY }}:frontend-latest"

    - name: Remove existing Docker containers
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{ steps.get-qa-ec2-ip.outputs.public_ip }} \
        "docker stop frontend backend && docker rm frontend backend"

    - name: Deploy Docker Containers
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{ steps.get-qa-ec2-ip.outputs.public_ip }} \
        "docker run -d --name frontend -p 5173:3000 746488717346.dkr.ecr.us-east-1.amazonaws.com/frontend-image:frontend-latest; \
        docker run -d --name backend -p 8800:8800 \
        -e DB_HOST='${{ secrets.DB_HOST }}' \
        -e DB_USER='${{ secrets.DB_USER }}' \
        -e DB_PASS='${{ secrets.DB_PASS }}' \
        -e DB_NAME='${{ secrets.DB_NAME }}' \
        -e PORT=8800 \
        746488717346.dkr.ecr.us-east-1.amazonaws.com/backend-image:backend-latest"
