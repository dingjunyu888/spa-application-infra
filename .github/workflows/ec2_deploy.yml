name: Build and Push Docker Image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:  # This line allows manual triggering of the workflow.

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        repository: 'dingjunyu888/crud-react-node-mySQL-go'
        token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1

    - name: Start EC2 Instance for Building and Testing
      run: |
        INSTANCE_ID=$(aws ec2 run-instances --image-id ami-05b10e08d247fb927 --instance-type t2.micro --key-name spa --security-group-ids sg-071cee3302403d191 --subnet-id subnet-0cc84b17429331c3d --query "Instances[0].InstanceId" --output text)
        echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
        echo "::set-output name=instance_id::$INSTANCE_ID"
        echo "Instance ID: $INSTANCE_ID"

    - name: Wait for EC2 Instance to be Running
      run: |
        aws ec2 wait instance-running --instance-ids $INSTANCE_ID
        echo "Instance is now running."

    - name: Get EC2 Public IP
      id: get-ip
      run: |
        PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
        echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
        echo "::set-output name=public_ip::$PUBLIC_IP"

    - name: Wait for EC2 Status Checks
      run: |
        echo "Waiting for EC2 status checks to complete..."
        aws ec2 wait instance-status-ok --instance-ids $INSTANCE_ID
        echo "EC2 instance is ready."

    - name: Set up SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" | base64 --decode > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ steps.get-ip.outputs.public_ip }} >> ~/.ssh/known_hosts

    - name: Access EC2 and Install Docker
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{ steps.get-ip.outputs.public_ip }} << EOF
        sudo yum update -y
        sudo yum install docker git -y
        sudo service docker start
        sudo usermod -a -G docker ec2-user
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.10.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version
        EOF

    - name: Verify Docker Installation
      run: |
        docker --version


    - name: Clone Repo, Build and Run Docker Containers
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@$PUBLIC_IP << EOF
        git clone https://github.com/dingjunyu888/crud-react-node-mySQL-go.git
        cd crud-react-node-mySQL-go
        docker-compose up -d
        EOF

    - name: Run Smoke Test
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@$PUBLIC_IP << 'EOF'
        ENDPOINT="http://localhost:8800/books"
        EXPECTED_STATUS_CODE=200
        response=\$(curl --write-out "%{http_code}" --silent --output /dev/null "\$ENDPOINT")
        if [[ "\$response" -eq "\$EXPECTED_STATUS_CODE" ]]; then
          echo "Smoke test passed: HTTP \$response"
          exit 0
        else
          echo "Smoke test failed: Expected HTTP \$EXPECTED_STATUS_CODE, got HTTP \$response"
          exit 1
        fi
        EOF

    - name: Build and Push Docker Image if Smoke Test Passes
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@$PUBLIC_IP << 'EOF'
        cd crud-react-node-mySQL-go
        docker build -t backend-image:latest ./backend
        docker tag backend-image:latest $ECR_REGISTRY/$ECR_REPOSITORY:backend-$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:backend-$IMAGE_TAG
        docker build -t frontend-image:latest ./frontend
        docker tag frontend-image:latest $ECR_REGISTRY/$ECR_REPOSITORY:frontend-$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:frontend-$IMAGE_TAG
        EOF

    - name: Push Image to Amazon ECR if Tests Pass
      run: |
        docker tag temp-image:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Clean up EC2 Instance
      if: always()
      run: |
        aws ec2 terminate-instances --instance-ids $INSTANCE_ID
